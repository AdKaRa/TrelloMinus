<%- partial("./share_card.ejs") %>

<div class="clearfix">
  <div class="col-lg-2"></div>
  <div class="col-lg-8">
    <div id="edit-card" class="panel panel-default" hidden style="width:700px">
      <div class="panel-heading clearfix">
        <div class="container-fluid">
          <h4 class="panel-title pull-left" style="padding-top: 7.5px;">Card "<span id="card-title"></span>" edit</h4>
          <button type="button" class="close pull-right" onclick="editCardViewClose()"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
        </div>
      </div>
      <div class="panel-body">
        <div class="clearfix">
          <form style="width:80%;margin-right:-1px;border-right: 1px solid #e3e3e3;padding-right: 10px;" class="clearfix pull-left">
            <div class="form-group">
              <label for="title" style="width:100px">Title:</label><input type="text" name="title" class="form-control" placeholder="Title..."/>
              <label for="deadline">Deadline:</label><input id="deadline" type="datetime" name="deadline" class="form-control" placeholder="MM/DD/YYYY HH:mm:ss" />
              <label for="priority">Priority:</label>
              <select id="priority" name="priority" class="form-control">
                <% _.each(CardHelper.PRIORITIES, function(p) {%>
                <option value="<%= p %>"><%= p %></option>
                <%});%>
              </select>
              <label for="labels">Labels:</label><div id="labels" style="width:100%;">
                <div class="btn-group" id="labels-picked">
                  <button type="button" style="background-color: #0c8da0 !important;" class="btn btn-default label-picker" data-toggle="popover" data-action="edit" data-placement="bottom">&nbsp;&nbsp;</button>
                </div>
                <button type="button" class="btn btn-default label-picker" data-toggle="popover" data-action="add" data-placement="bottom"><span class="glyphicon glyphicon-plus"></span></button>
              </div>
              <label for="description" style="width:100px">Description:</label><textarea name="description" placeholder="Description here..." class="form-control"></textarea>
              <input type="hidden" name="id"/>
            </div>
            <input type="submit" class="btn btn-primary pull-right" value="Save"/>
          </form>
          <div style="width:18%;" class="pull-right">
            <% if(board.type === "shared"){%>
             <button type="button" id="share-card-button" class="btn btn-default" style="width:100%;">Share</button>
            <%}%>
          </div>
        </div>
        <hr />
        <h3>Comments:</h3>
        <div id="comments-wrapper">Here gonna be comments</div>
        <% if(typeof req.session.user !== 'undefined') { %>
        <h4>Add Comment:</h4>
        <form id="add-comment">
          <div class="panel panel-default comment">

            <div class="panel-heading comment-user"><%= req.session.user.name %>:</div>
            <div class="panel-body comment-content"><textarea name="content" placeholder="You comment here..." style="border:0; resize:none; width:100%; overflow: hidden;"></textarea></div>
            <div class="panel-footer comment-data"><input class="btn btn-primary" type="submit" value="Comment" /></div>

          </div>
        </form>
        <% } %>
      </div>
    </div>
  </div>
</div>


<script type="text/javascript">
  var editCardPanel = document.querySelector("#edit-card");
  var editCardForm = editCardPanel.querySelector("form");
  var commentsWrapper = document.querySelector("#comments-wrapper");
  var addCommentForm = document.querySelector("#add-comment");

  editCardForm.onsubmit = onEditCardFormSubmit;
  addCommentForm.onsubmit = function(e) {
    var form = e.target;
    var content = form.content.value;
    var card = editCardForm.id.value;
    var spanParent = document.querySelector("#card-"+card);
    io.socket.post(
      '/comment/add',
      {card:card,content:content},
      function(res,jres){
        if(jres.statusCode === 200) {
          alert("Comment added");
          console.log(res);
          editCardViewClose();
          editCardViewInit(spanParent);
        }
      });
    return false;
  };

  function commentTemplate(comment) {
    var commentDiv = document.createElement('div');
    var commentUserDiv = document.createElement('div');
    var commentContentDiv = document.createElement('div');
    var commentDataDiv = document.createElement('div');
    commentDiv.className = "panel panel-default comment";
    commentUserDiv.className = "panel-heading comment-user";
    commentContentDiv.className = "panel-body comment-content";
    commentDataDiv.className = "panel-footer comment-data";
    commentUserDiv.innerHTML = comment.username;
    commentContentDiv.innerHTML = comment.content;
    commentDataDiv.innerHTML = "Created "+(new Date(comment.createdAt)).toLocaleString().replace(',',' at ');
    commentDiv.appendChild(commentUserDiv);
    commentDiv.appendChild(commentContentDiv);
    commentDiv.appendChild(commentDataDiv);
    return commentDiv;
  }

  function editCardViewInit(e) {
    var cardId = e.id.split('-')[1];
    commentsWrapper.innerHTML = "";
    io.socket.post(
      '/card/get/',
      {id: cardId},
      function(res,jres){
        if(jres.statusCode === 200) {
          var card = res.card;
          var comments = res.comments;
          var form = editCardPanel.querySelector("form");
          var pickedLabels = $('#labels-picked');
          editCardPanel.querySelector("#card-title").innerHTML = card.title;
          editCardPanel.querySelector("#add-comment").content.value = "";
          form.title.value = card.title;
          form.deadline.value = "";
          if(card.deadline && card.deadline !== "") {
            var deadline = new Date(card.deadline);
            var formattedDeadline = ('0'+(deadline.getMonth()+1)).slice(-2)+
              "/"+('0'+deadline.getDate()).slice(-2)+
              "/"+deadline.getFullYear()+
              " "+('0'+deadline.getHours()).slice(-2)+":"+
              ('0'+deadline.getMinutes()).slice(-2)+":"+('0'+deadline.getSeconds()).slice(-2);
            form.deadline.value = formattedDeadline;
          }
          form.priority.value = card.priority || "none";
          form.description.value = card.description || "";
          form.id.value = card.id;
          pickedLabels.empty();
          res.card.labels ? res.card.labels.forEach(function(label){
            pickedLabels.append(getLabelTemplate(label));
          }): null;
          for(var i=0, l = comments.length; i < l; i++) {
            var comment = comments[i];
            commentsWrapper.appendChild(commentTemplate(comment));
          }
        }
      });
    editCardPanel.hidden = false;
  }

  function editCardViewClose() {
    editCardPanel.hidden = true;
  }

  function onEditCardFormSubmit(e) {
    var form = e.target;
    var span = document.querySelector("#card-"+form.id.value+" span.card-title");
    var deadline = form.deadline.value === "" ? "" : (new Date(form.deadline.value)).toJSON();
    var labels = [];
    $('#labels-picked').children().each(function(index,label){
      labels.push(($(label).data("label")));
    });
    io.socket.post(
      '/card/edit/',
      {id:form.id.value, title:form.title.value,
        priority:form.priority.value,
        deadline: deadline,
        description:form.description.value,
        labels: labels
      },
      function(res,jres) {
        if (jres.statusCode === 200) {
          var card = res[0];
          $(span).parent().empty()
            .append($('<div/>', {
              class: 'card-labels clearfix'
            }).each(function () {
              var labelDiv = $(this);
              card.labels.forEach(function (label) {
                labelDiv.append($('<span/>', {
                  css: {
                    'background-color': label
                  }
                }));
              });
            })
          ).append($('<span/>', {
              html: card.title,
              class: 'card-title'
            }));
        }
      });
    editCardViewClose();
    editCardViewInit(span.parentNode);
    return false;
  }

  var labelPickerObj = {html:true,
    content:function(){
      var elem = $(this);
      var isEdit = elem.data("action") === "edit";
      var other = $(".popover");
      if(other.length > 0)
        other.popover('hide');
      var content = $('<div/>');
      var li = ['#428bca','#5cb85c','#5bc0de','#f0ad4e','#d9534f'];
      li.forEach(function(color){
        content.append($('<a/>',{
          class:"btn btn-lg btn-block",
          css: {
            'background-color': color,
            'min-width': '200px'
          },
          html: "&nbsp;"
        }).data("label",color).hover(function(){
          if(!isEdit)
            $(this).html("<span class='glyphicon glyphicon-plus'></span>");
        },function(){
          if(!isEdit)
            $(this).html("&nbsp;");
        }).click(function(){
          var label = $(this);
          if(isEdit) {
            elem.css({
              'background-color': label.data("label")
            }).data({
              'label': label.data("label")
            });
          }
          else {elem.prev().append(getLabelTemplate(label.data("label")));
          }
          elem.popover('hide');
        }))
      });
      if(isEdit) {
        content.append($('<button/>',{
          class: "btn btn-lg btn-block btn-danger",
          css: {
            'min-width': '200px'
          },
          html: "<span class='glyphicon glyphicon-trash'></span>",
          type: 'button'
        }).click(function(){
          elem.popover('hide');
          elem.remove();
        }));
      }
      return content;
    },
    title: function(){
      var elem = $(this);
      var text = elem.data("action") === "add" ? "Add label" : "Change label";
      var close = $('<button/>',{
        id: 'close-label-picker',
        class:"close pull-right",
        html:'<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>',
        type: 'button'
      }).click(function(){
        elem.popover('hide');
      });
      return  $('<div/>',{class:"clearfix"})
        .append($('<div/>',{html:text,css:{'display':'inline','line-height':'24px'}}))
        .append(close);
    }
  }

  $(function(){

    $(".label-picker").popover(labelPickerObj);
  });

  function getLabelTemplate(data){
    return $('<button/>',{
      css: {
        'background-color': data
      },
      class: "btn btn-default label-picker",
      data: {
        'label': data,
        'toggle': 'popover',
        'action': 'edit',
        'placement': 'bottom'
      },
      html: '&nbsp;&nbsp;',
      type: 'button'
    }).popover(labelPickerObj);
  }
  <% if(board.type === "shared"){%>
    $('#share-card-button').on('click',function(){
      var card = editCardForm.id.value;
      var organization =  '<%= board.organization.id %>';
    io.socket.get('/card/'+card+'/share/'+organization+'/get',function(res,jres){
      if(jres.statusCode === 200) {
        //fill the modal
        var list = $('<ul/>',{class:'list-group'});
        res.share.forEach(function(assignee){
          var li = $('<li/>',{class:'list-group-item',html:assignee.name,data:{'id':assignee.id}});
          if(assignee.assigned)
            li.addClass('ui-selected');
          list.append(li);
        });
        list.appendTo($('#share-card .modal-body').empty()).selectable();
        $('#share-card').modal();
      }
    });
  });
  <%}%>
</script>

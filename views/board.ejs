<h3><%= board.title %> <button class="btn btn-default btn-xs" data-hash="<%= req.path %>" onclick="toggleStareBoard(this)"><span class="glyphicon glyphicon-star<% if(!board.starred) {%>-empty<%}%>"></span></button> <button class="btn btn-default btn-xs"><%=: board.type | capitalize %> <% if(board.type === "shared"){%> with <%=: board.organization.name | capitalize %><%}%></button></h3>

<%- partial('partials/edit_card.ejs') %>

<ul id="lists" class="clearfix">
  <% for(var i= 0, l= lists.length; i < l; i++) {%>
    <li class="bg-primary text-primary">
      <strong><%= lists[i].name %></strong>
      <div>
        <ul id="list-<%= lists[i].id %>" class="sortable">
          <% var cards =  _.sortBy(lists[i].cards,'position'); %>
          <% _.each(cards,function(card) { %>
            <li class="card" id="card-<%= card.id %>" onclick="editCardViewInit(this)" data-position="<%= card.position %>">
              <div class="card-labels clearfix">
                <% _.each(card.labels,function(label){ %>
                  <span style="background-color:<%= label %>;"></span>
                <% }) %>
              </div>
              <span class="card-title"><%= card.title %></span>
            </li>
          <% }); %>
        </ul>
        <span class="add-card">Add Card</span>
      </div>
    </li>
  <%}%>
  <li class="bg-info">
    <div id="add-new-list">
      <span>Add new list</span>
      <span id="addListFormWrapper" hidden>
        <button type="button" class="close pull-right" id="hide-add-button-form"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
        <form id="addListForm" method=POST action="#">
          <div class="form-group">
            <label for="name">New list name:</label><input id="name" type="text" name="name" class="form-control" placeholder="List name..."/>
          </div>
          <input type="hidden" name="board" value="<%= board.hash %>" />
          <input type="submit" value="Add" class="btn btn-success"/>
        </form>
      </span>
    </div>
  </li>
</ul>

<a class="btn btn-primary" href="/user/">Back</a>

<script type="text/javascript">
  var formElement = document.querySelector("#addListForm");
  var addListDivElement = document.querySelector("#add-new-list");
  var hideFormElement = document.querySelector("#hide-add-button-form");
  var addCardButton = document.querySelectorAll(".add-card");

  for(var i = 0, l = addCardButton.length; i < l; i++) addCardButton[i].onclick = addCard;
  function addCard(e){
    var list = e.target.previousElementSibling;
    var listId = list.id.split("-")[1];
    list.appendChild(cardFormTemplate(listId));
    list.querySelector("li:last-of-type input[type=text]").focus();
  }

  function cardFormTemplate(listId){
    var card = document.createElement("li");
    var span = document.createElement("span");
    var form = document.createElement("form")
    var input = document.createElement("input");
    var list = document.createElement("input");
    card.className = "added-card";
    input.name = "title";
    input.type = "text";
    list.name = "list";
    list.type = "hidden";
    list.value = listId;
    form.onsubmit = onNewCardSubmit;
    input.onblur = onNewCardBlur;
    form.appendChild(input);
    form.appendChild(list);
    span.appendChild(form);
    card.appendChild(span);
    return card;
  }

  function onNewCardSubmit(e) {
    var form = e.target;
    var title = form[0].value;
    var list = form[1].value;
    io.socket.post(
      '/card/create',
      {title:title,
        list:list},
      function(res,jres){
        if(jres.statusCode === 200) {
          var span = form.parentElement;
          span.innerHTML = res.title;
          span.parentElement.id = "card-"+res.id;
          span.parentElement.className = "card";
          span.className = "card-title";
          span.parentElement.onclick = function(e){
            var element = e.target;
            if(element.id === undefined || element.id === "") element = element.parentElement;
            editCardViewInit(element);
          };
        }
      });
    return false;
  }

  function onNewCardBlur(e) {
    var card = e.target.parentElement.parentElement.parentElement;
    card.remove(card);
  }

  function toggleVisibilityAddListForm(e){
    addListDivElement.children[0].hidden = !addListDivElement.children[0].hidden;
    addListDivElement.children[1].hidden = !addListDivElement.children[1].hidden;
    addListDivElement.onclick = addListDivElement.onclick === null ? toggleVisibilityAddListForm : null;
    e.stopPropagation();
  }

  function addListSubmit() {
    io.socket.post(
      '/list/add',
      {name:this.name.value, board: this.board.value},
      function(res,jres){
        if(res.message) {
          alert(res.message);
        }
        if(jres.statusCode === 200) {
          window.location = window.location;
        }
      });
    return false;
  }

  formElement.onsubmit = addListSubmit;
  addListDivElement.onclick = toggleVisibilityAddListForm;
  hideFormElement.onclick = toggleVisibilityAddListForm;

  function reorderCards(cardid, column, position) {
    io.socket.post('/list/reorder',{card:cardid,column:column,position:position},
    function(res,jres){
      console.log("Card reorder",res,jres);
    });
  }

  $('.sortable').sortable({connectWith:'.sortable',
    helper : 'clone',
    dropOnEmpty: true,
  stop:function(e,ui){
    var item = $(ui.item[0]);
    var column = item.parent().attr('id').split("-")[1];
    var card = item[0].id.split("-")[1];
    var position = item.index();
    reorderCards(card,column,position);
  }}).disableSelection();

</script>

